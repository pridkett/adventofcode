import unittest

from day_14 import Solution

# x, y - xvel, yvel
AOC_INPUT_1="""p=0,4 v=3,-3
p=6,3 v=-1,-3
p=10,3 v=-1,2
p=2,0 v=2,-1
p=0,0 v=1,3
p=3,0 v=-2,-2
p=7,6 v=-1,-3
p=3,0 v=-1,-2
p=9,3 v=2,3
p=7,3 v=-1,2
p=2,4 v=2,-3
p=9,5 v=-3,-3"""
AOC_INPUT_1_MAP="""1.12.......
...........
...........
......11.11
1.1........
.........1.
.......1..."""
AOC_INPUT_1_DIM=11,7
AOC_INPUT_1_MAP_100="""......2..1.
...........
1..........
.11........
.....1.....
...12......
.1....1...."""
AOC_INPUT_1_SAFETY_FACTOR_100=12

AOC_INPUT_2="""p=2,4 v=2,-3"""
AOC_INPUT_2_DIM=11,7
AOC_INPUT_2_MAP_0="""...........
...........
...........
...........
..1........
...........
..........."""
AOC_INPUT_2_MAP_1="""...........
....1......
...........
...........
...........
...........
..........."""
AOC_INPUT_2_MAP_2="""...........
...........
...........
...........
...........
......1....
..........."""
AOC_INPUT_2_MAP_3="""...........
...........
........1..
...........
...........
...........
..........."""
AOC_INPUT_2_MAP_4="""...........
...........
...........
...........
...........
...........
..........1"""
AOC_INPUT_2_MAP_5="""...........
...........
...........
.1.........
...........
...........
..........."""

class TestSolution(unittest.TestCase):
    def setUp(self):
        self.solution = Solution()

    def test_aoc_input_1(self):
        self.solution.set_dimensions(AOC_INPUT_1_DIM)
        self.solution.load_robots(AOC_INPUT_1)
        self.assertEqual(AOC_INPUT_1_MAP, self.solution.get_map())

    def test_aoc_input_1_move(self):
        self.solution.set_dimensions(AOC_INPUT_1_DIM)
        self.solution.load_robots(AOC_INPUT_1)
        self.solution.tick(100)
        self.assertEqual(AOC_INPUT_1_MAP_100, self.solution.get_map())

    def test_aoc_input_1_safety_factor(self):
        self.solution.set_dimensions(AOC_INPUT_1_DIM)
        self.solution.load_robots(AOC_INPUT_1)
        self.solution.tick(100)
        self.assertEqual(AOC_INPUT_1_SAFETY_FACTOR_100, self.solution.get_safety_factor())

    def test_aoc_input_2(self):
        self.solution.set_dimensions(AOC_INPUT_2_DIM)
        self.solution.load_robots(AOC_INPUT_2)
        self.assertEqual(AOC_INPUT_2_MAP_0, self.solution.get_map())

    def test_aoc_input_2_move(self):
        self.solution.set_dimensions(AOC_INPUT_2_DIM)
        self.solution.load_robots(AOC_INPUT_2)
        self.solution.tick(1)
        self.assertEqual(AOC_INPUT_2_MAP_1, self.solution.get_map())
        self.solution.tick(1)
        self.assertEqual(AOC_INPUT_2_MAP_2, self.solution.get_map())
        self.solution.tick(1)
        self.assertEqual(AOC_INPUT_2_MAP_3, self.solution.get_map())
        self.solution.tick(1)
        self.assertEqual(AOC_INPUT_2_MAP_4, self.solution.get_map())
        self.solution.tick(1)
        self.assertEqual(AOC_INPUT_2_MAP_5, self.solution.get_map())
        
if __name__ == '__main__':
    unittest.main()